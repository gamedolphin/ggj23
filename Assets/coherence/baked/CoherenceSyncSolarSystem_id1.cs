// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_231ae0877bd5748d18685671ff08a357_a43b6247_e3e4_41d6_a2de_25cac85695eb : IntBinding
	{
		private SolarSystem CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (SolarSystem)UnityComponent;
		}
		public override string CoherenceComponentName => "SolarSystem_id1_SolarSystem_6223684658301783008";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override int Value
		{
			get => (int)(System.Int32)(CastedUnityComponent.seed);
			set => CastedUnityComponent.seed = (System.Int32)(value);
		}

		protected override int ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (SolarSystem_id1_SolarSystem_6223684658301783008)coherenceComponent;
			return update.seed;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (SolarSystem_id1_SolarSystem_6223684658301783008)coherenceComponent;
			update.seed = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new SolarSystem_id1_SolarSystem_6223684658301783008();
		}
	}

	public class Binding_231ae0877bd5748d18685671ff08a357_100b7e72_2aec_46d1_a765_8e9497d91faf : IntBinding
	{
		private SolarSystem CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (SolarSystem)UnityComponent;
		}
		public override string CoherenceComponentName => "SolarSystem_id1_SolarSystem_6223684658301783008";

		public override uint FieldMask => 0b00000000000000000000000000000010;

		public override int Value
		{
			get => (int)(System.Int32)(CastedUnityComponent.portalCount);
			set => CastedUnityComponent.portalCount = (System.Int32)(value);
		}

		protected override int ReadComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (SolarSystem_id1_SolarSystem_6223684658301783008)coherenceComponent;
			return update.portalCount;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (SolarSystem_id1_SolarSystem_6223684658301783008)coherenceComponent;
			update.portalCount = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new SolarSystem_id1_SolarSystem_6223684658301783008();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'SolarSystem' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncSolarSystem_id1 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncSolarSystem_id1>();
			if (coherenceSync.TryGetBindingByGuid("a43b6247-e3e4-41d6-a2de-25cac85695eb", "seed", out Binding InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_seed))
			{
				var clone = new Binding_231ae0877bd5748d18685671ff08a357_a43b6247_e3e4_41d6_a2de_25cac85695eb();
				InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_seed.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_seed)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (SolarSystem).seed");
			}
			if (coherenceSync.TryGetBindingByGuid("100b7e72-2aec-46d1-a765-8e9497d91faf", "portalCount", out Binding InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_portalCount))
			{
				var clone = new Binding_231ae0877bd5748d18685671ff08a357_100b7e72_2aec_46d1_a765_8e9497d91faf();
				InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_portalCount.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalSolarSystem_id1_SolarSystem_6223684658301783008_SolarSystem_id1_SolarSystem_6223684658301783008_portalCount)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (SolarSystem).portalCount");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncSolarSystem_id1] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
